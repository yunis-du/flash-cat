syntax = "proto3";
package relay;

service RelayService {
  // Peek the relay info.
  rpc Peek(Empty) returns (Empty);

  // Join-created relay session.
  rpc Join(JoinRequest) returns (JoinResponse);

  // Stream real-time interactive to the session.
  rpc Channel(stream RelayUpdate) returns (stream RelayUpdate);

  // Gracefully shut down an existing relay session.
  rpc Close(CloseRequest) returns (CloseResponse);
}

// Empty message.
message Empty {}

// Request to open an relay session.
message JoinRequest {
  Id id = 1;  // Join-created id info.
  ClientType client_type = 2; // Client type.
  RelayInfo sender_local_relay = 3; // Local relay info for sender.
}

// Details of relay session.
message JoinResponse {
  oneof join_response_message {
    JoinSuccess success = 1;  // Join relay session success.
    JoinFailed failed = 2;    // Join relay session failed.
  }
}

// Join success.
message JoinSuccess {
  RelayInfo relay = 1;  // Relay info.
  RelayInfo sender_local_relay = 2; // Local relay info for sender.
  string client_latest_version = 3; // Latest client version.
}

// Join failed.
message JoinFailed {
  string error_msg = 1; // Join failed message.
}

message RelayInfo {
  string relay_ip = 1;  // Ip address of relay.
  uint32 relay_port = 2;  // Port of relay.
}

// Request to stop a relay session gracefully.
message CloseRequest {
  bytes encrypted_share_code = 1;  // Encrypted share code.
}

// Server response to closing a session.
message CloseResponse {}

// Bidirectional streaming update from the relay server.
message RelayUpdate{
  oneof relay_message {
    Id join = 1;           // First stream message: join session.
    Joined joined = 2;
    Ready ready = 3;
    SenderUpdate sender = 4;
    ReceiverUpdate receiver = 5;
    Done done = 6;
    Terminated terminated = 7;
    fixed64 ping = 8;
    fixed64 pong = 9;
    string error = 1024;
  }
}

// Join to the ID of the relay session.
message Id {
  bytes encrypted_share_code = 1;  // Encrypted share code.
  Character character = 2;         // Character.
}

// Client type.
enum ClientType {
  Cli = 0; // CLI client.
  App = 1; // App client.
}

// Character of the client.
enum Character {
  Sender = 0;     // Character of sharer.
  Receiver = 1;   // Character of recipient.
}

// Joined.
message Joined {}

// Ready.
message Ready {}

// Done.
message Done {}

// Terminated.
message Terminated {}

// Sender update.
message SenderUpdate {
  oneof sender_message {
    SendRequest send_request = 1; // Send request.
    NewFileRequest new_file_request = 2; // New file request.
    FileData file_data = 3; // File data.
    FileDone file_done = 4; // File done.
  }
}

// Send request.
message SendRequest {
  uint64 total_size = 1; // Total size.
  uint64 num_files = 2; // Number of files.
  uint64 num_folders = 3; // Number of folders.
  uint64 max_file_name_length = 4; // Maximum file name length.
}

// New file request.
message NewFileRequest {
  uint64 file_id = 1; // File id.
  string filename = 2; // File name.
  uint32 file_mode = 3; // File mode.
  string relative_path = 4; // Relative path.
  uint64 total_size = 5; // Total size.
  bool is_empty_dir = 6; // Whether it is an empty directory.
}

// File data.
message FileData {
  uint64 file_id = 1; // File id.
  bytes data = 2; // File data.
}

// File done.
message FileDone {
  uint64 file_id = 1; // File id.
}

// Receiver update.
message ReceiverUpdate {
  oneof receiver_message {
    Confirm share_confirm = 1; // Share confirm.
    FileConfirm new_file_confirm = 2; // New file confirm.
  }
}

// File confirm.
message FileConfirm {
  uint64 file_id = 1; // File id.
  Confirm confirm = 2; // Confirm.
}

// Confirm.
enum Confirm {
  Accept = 0; // Accept.
  Reject = 1; // Reject.
}

// File result.
message FileResult {
  int32 file_id = 1; // File id.
  int32 status = 2; // The status of file transfer, 0 is success other is failed.
}
